{"compress":true,"commitItems":[["afaac39f-fcb4-47e4-85ca-2744b3f80395",1547174313093,"# Lorem ipsum\n\nInterdum et malesuada fames ac ante ipsum primis in faucibus. Morbi sagittis aliquam orci, id elementum leo varius at. Suspendisse in hendrerit orci. Aliquam nec congue augue.\n\n* [x] In volutpat scelerisque congue.\n* [ ] Nam ultricies justo dictum ligula pulvinar iaculis.\n* [ ] Etiam vulputate nulla eget lectus fermentum accumsan.\n* [ ] Sed in sem tincidunt, sollicitudin erat pharetra, bibendum sapien.",[[1547174273263,["yongchao@yongchao-PC",[[-1,2,"Lorem ipsum"],[1,13,"W"]],[2,13],[3,3]]],[1547174276421,["yongchao@yongchao-PC",[[1,3,"ebService"]],[3,3],[12,12]]],[1547174281116,["yongchao@yongchao-PC",[[-1,14,"Interdum et malesuada fames ac ante ipsum primis in faucibus. Morbi sagittis aliquam orci, id elementum leo varius at. Suspendisse in hendrerit orci. Aliquam nec congue augue."],[-1,190,"\n* [x] In volutpat scelerisque congue.\n* [ ] Nam ultricies justo dictum ligula pulvinar iaculis.\n* [ ] Etiam vulputate nulla eget lectus fermentum accumsan.\n* [ ] Sed in sem tincidunt, sollicitudin erat pharetra, bibendum sapien."]],[14,419],[14,14]]]],null,"yongchao@yongchao-PC"],["bec3a5a0-3747-4e96-88e3-6c9a66d6d7d6",1547186831812,"# WebService\n\n\n",[[1547186782627,["yongchao@yongchao-PC",[[1,14,"https://www.cnblogs.com/xdp-gacl/p/4048937.html"]],[14,14],[61,61]]],[1547186784587,["yongchao@yongchao-PC",[[1,62,"\n"]],[61,61],[62,62]]],[1547186787697,["yongchao@yongchao-PC",[[1,14,"* "]],[14,14],[16,16]]],[1547186790438,["yongchao@yongchao-PC",[[1,64,"* \n"]],[63,63],[66,66]]],[1547186791981,["yongchao@yongchao-PC",[[-1,64,"* "]],[66,66],[64,64]]],[1547186805703,["yongchao@yongchao-PC",[[1,65,"当前的应用程序开发逐步的呈现了两种迥然不同的倾向：一种是基于浏览器的瘦客户端应用程序，一种是基于浏览器的富客户端应用程序（RIA），当然后一种技术相对来说更加的时髦一些（如现在很流行的Html5技术），这里主要讲前者。"]],[65,65],[174,174]]],[1547186809126,["yongchao@yongchao-PC",[[1,90,"\n"]],[90,90],[91,91]]],[1547186811789,["yongchao@yongchao-PC",[[1,109,"\n"]],[109,109],[110,110]]],[1547186827197,["yongchao@yongchao-PC",[[1,177,"\n"]],[176,176],[177,177]]],[1547186827534,["yongchao@yongchao-PC",[[1,178,"\n"]],[177,177],[178,178]]],[1547186933869,["yongchao@yongchao-PC",[[1,178,"基于浏览器的瘦客户端应用程序并不是 因为瘦客户能够提供更好的用户界面，而是因为它能够避免花在桌面应用程序发布上的高成本。发布桌面应用程序成本很高，一半是因为应用程序安装和配置的问 题，另一半是因为客户和服务器之间通信的问题。传统的Windows富客户应用程序使用DCOM来与服务器进行通信和调用远程对象。配置好DCOM使其在 一个大型的网络中正常工作将是一个极富挑战性的工作，同时也是许多IT工程师的噩梦。事实上，许多IT工程师宁愿忍受浏览器所带来的功能限制，也不愿在局 域网上去运行一个DCOM。关于客户端与服务器的通信问题，一个完美的解决方法是使用HTTP协议来通信。这是因为任何运行Web浏览器的机器都在使用 HTTP协议。同时，当前许多防火墙也配置为只允许HTTP连接。许多商用程序还面临另一个问题，那就是与其他程序的互操作性。如果所有的应用程序都是使 用COM或.NET语言写的，并且都运行在Windows平台上，那就天下太平了。然而，事实上大多数商业数据仍然在大型主机上以非关系文件(VSAM) 的形式存放，并由COBOL语言编写的大型机程序访问。而且，目前还有很多商用程序继续在使用C++、Java、Visual Basic和其他各种各样 的语言编写。现在，除了最简单的程序之外，所有的应用程序都需要与运行在其他异构平台上的应用程序集成并进行数据交换。这样的任务通常都是由特殊的方法， 如文件传输和分析，消息队列，还有仅适用于某些情况的的API，如IBM的高级程序到程序交流(APPC)等来完成的。在以前，没有一个应用程序通信标 准，是独立于平台、组建模型和编程语言的。只有通过Web Service，客户端和服务器才能够自由的用HTTP进行通信，不论两个程序的平台和编程语言是什么。"]],[178,178],[927,927]]],[1547186947193,["yongchao@yongchao-PC",[[1,427,"**"],[1,463,"**"]],[427,463],[427,467]]],[1547186959397,["yongchao@yongchao-PC",[[1,932,"\n"]],[931,931],[932,932]]],[1547186959773,["yongchao@yongchao-PC",[[1,933,"\n"]],[932,932],[933,933]]],[1547186975028,["yongchao@yongchao-PC",[[1,64,"## 一、序言"]],[64,64],[71,71]]],[1547186997146,["yongchao@yongchao-PC",[[1,940,"## 二、WebService到底是什"]],[940,940],[959,959]]],[1547186998906,["yongchao@yongchao-PC",[[-1,702," "],[1,703," "],[-1,888," "],[1,889," "],[1,959,"m"]],[959,959],[960,960]]],[1547186999621,["yongchao@yongchao-PC",[[-1,959,"m"]],[960,960],[959,959]]],[1547187001768,["yongchao@yongchao-PC",[[1,959,"么"]],[959,959],[960,960]]],[1547187002583,["yongchao@yongchao-PC",[[1,961,"\n"]],[960,960],[961,961]]],[1547283625738,["yongchao@yongchao-PC",[[1,961,"**WebService是一种跨编程语言和跨操作系统平台的远程调用技术。**"]],[961,961],[999,999]]],[1547283818181,["yongchao@yongchao-PC",[[1,1000,"\n"]],[999,999],[1000,1000]]],[1547283819029,["yongchao@yongchao-PC",[[1,1000,"所谓跨编程语言和跨操作平台，就是说服务端程序采用java编写，客户端程序则可以采用其他编程语言编写，反之亦然！跨操作系统平台则是指服务端程序和客户端程序可以在不同的操作系统上运行。\n\n    所谓远程调用，就是一台计算机a上 的一个程序可以调用到另外一台计算机b上的一个对象的方法，譬如，银联提供给商场的pos刷卡系统，商场的POS机转账调用的转账方法的代码其实是跑在银 行服务器上。再比如，amazon，天气预报系统，淘宝网，校内网，百度等把自己的系统服务以webservice服务的形式暴露出来，让第三方网站和程 序可以调用这些服务功能，这样扩展了自己系统的市场占有率，往大的概念上吹，就是所谓的SOA应用。\n\n   其实可以从多个角度来理解 WebService，从表面上看，WebService就是一个应用程序向外界暴露出一个能通过Web进行调用的API，也就是说能用编程的方法通过 Web来调用这个应用程序。我们把调用这个WebService的应用程序叫做客户端，而把提供这个WebService的应用程序叫做服务端。从深层次 看，WebService是建立可互操作的分布式应用程序的新平台，是一个平台，是一套标准。它定义了应用程序如何在Web上实现互操作性，你可以用任何 你喜欢的语言，在任何你喜欢的平台上写Web service ，只要我们可以通过Web service标准对这些服务进行查询和访问。 \n\n   WebService平台需要一套协议来实现分布式应用程序的创建。任何平台都有它的数据表示方法和类型系统。要实现互操作性，WebService平台 必须提供一套标准的类型系统，用于沟通不同平台、编程语言和组件模型中的不同类型系统。Web service平台必须提供一种标准来描述 Web service，让客户可以得到足够的信息来调用这个Web service。最后，我们还必须有一种方法来对这个Web service进行远 程调用,这种方法实际是一种远程过程调用协议(RPC)。为了达到互操作性，这种RPC协议还必须与平台和编程语言无关。"]],[1000,1000],[1882,1882]]],[1547283826821,["yongchao@yongchao-PC",[[1,1002,"**"],[1,1013,"**"]],[1002,1013],[1002,1017]]],[1547283831948,["yongchao@yongchao-PC",[[-1,1096,"    "]],[1100,1100],[1096,1096]]],[1547283832332,["yongchao@yongchao-PC",[[-1,1095,"\n"]],[1096,1096],[1095,1095]]],[1547283835645,["yongchao@yongchao-PC",[[1,1097,"**"],[1,1101,"**"]],[1097,1101],[1097,1105]]],[1547283844052,["yongchao@yongchao-PC",[[-1,1310,"\n"]],[1310,1310],[1309,1309]]],[1547283848692,["yongchao@yongchao-PC",[[1,1000,"    "]],[1000,1000],[1004,1004]]],[1547283850620,["yongchao@yongchao-PC",[[1,1099,"    "]],[1099,1099],[1103,1103]]],[1547283870309,["yongchao@yongchao-PC",[[1,1351,"++"],[1,1418,"++"]],[1351,1418],[1351,1422]]],[1547283888797,["yongchao@yongchao-PC",[[-1,1555," "]],[1556,1556],[1555,1555]]],[1547283895748,["yongchao@yongchao-PC",[[-1,1622,"\n"]],[1622,1622],[1621,1621]]],[1547283898916,["yongchao@yongchao-PC",[[1,1624," \n  "]],[1621,1621],[1625,1625]]],[1547283900516,["yongchao@yongchao-PC",[[1,1318,"    \n"]],[1317,1317],[1322,1322]]],[1547283901732,["yongchao@yongchao-PC",[[1,1103,"\n    "]],[1098,1098],[1103,1103]]],[1547283922301,["yongchao@yongchao-PC",[[-1,1850," "]],[1851,1851],[1850,1850]]],[1547283930117,["yongchao@yongchao-PC",[[1,1863,"**"],[1,1876,"**"]],[1863,1876],[1863,1880]]],[1547283931069,["yongchao@yongchao-PC",[[1,1863,"++"],[1,1880,"++"]],[1863,1880],[1863,1884]]],[1547283935187,["yongchao@yongchao-PC",[[-1,1863,"++"],[-1,1882,"++"]],[1863,1884],[1863,1880]]],[1547283948604,["yongchao@yongchao-PC",[[1,1912,"   \n"]],[1911,1911],[1915,1915]]],[1547283974197,["yongchao@yongchao-PC",[[1,1915,"## 三、WebService平台技术"]],[1915,1915],[1934,1934]]],[1547283976893,["yongchao@yongchao-PC",[[1,1915,"\n   "]],[1911,1911],[1915,1915]]],[1547283990492,["yongchao@yongchao-PC",[[-1,1919,"## 三、WebService平台技术"]],[1919,1938],[1919,1919]]],[1547284001069,["yongchao@yongchao-PC",[[1,1919,"## 三、WebService平台技术"]],[1919,1919],[1938,1938]]],[1547284016716,["yongchao@yongchao-PC",[[1,1922,"二、WebService到底是什么## "]],[1919,1919],[1939,1939]]],[1547284033269,["yongchao@yongchao-PC",[[-1,1922,"二、WebService到底是什么## "]],[1922,1942],[1922,1922]]],[1547284044693,["yongchao@yongchao-PC",[[-1,1916,"   "]],[1919,1919],[1916,1916]]],[1547284048565,["yongchao@yongchao-PC",[[1,1936,"\n"]],[1935,1935],[1936,1936]]],[1547284183054,["yongchao@yongchao-PC",[[1,1936,"XML+XSD,SOAP和WSDL就是构成WebService平台的三大技术。"]],[1936,1936],[1975,1975]]],[1547285513318,["yongchao@yongchao-PC",[[1,1976,"\n"]],[1975,1975],[1976,1976]]],[1547285514336,["yongchao@yongchao-PC",[[1,1976,"### 3.1、XML+XSD\n\n　　WebService采用HTTP协议传输数据，采用XML格式封装数据（即XML中说明调用远程服务对象的哪个方法，传递的参数是什么，以及服务对象的 返回结果是什么）。XML是WebService平台中表示数据的格式。除了易于建立和易于分析外，XML主要的优点在于它既是平台无关的，又是厂商无关 的。无关性是比技术优越性更重要的：软件厂商是不会选择一个由竞争对手所发明的技术的。 \n\n　　XML解决了数据表示的问题，但它没有定义一套标准的数据类型，更没有说怎么去扩展这套数据类型。例如，整形数到底代表什么？16位，32位，64位？这 些细节对实现互操作性很重要。XML Schema(XSD)就是专门解决这个问题的一套标准。它定义了一套标准的数据类型，并给出了一种语言来扩展这套数据类型。WebService平台就 是用XSD来作为其数据类型系统的。当你用某种语言(如VB.NET或C#)来构造一个Web service时，为了符合WebService标准，所 有你使用的数据类型都必须被转换为XSD类型。你用的工具可能已经自动帮你完成了这个转换，但你很可能会根据你的需要修改一下转换过程。\n\n### 3.2、SOAP\n\n WebService通过HTTP协议发送请求和接收结果时，发送的请求内容和结果内容都采用XML格式封装，并增加了一些特定的HTTP消息头，以说明 HTTP消息的内容格式，这些特定的HTTP消息头和XML内容格式就是SOAP协议。SOAP提供了标准的RPC方法来调用Web Service。\n\n  **SOAP协议 = HTTP协议 + XML数据格式**\n\n  SOAP协议定义了SOAP消息的格式，SOAP协议是基于HTTP协议的，SOAP也是基于XML和XSD的，XML是SOAP的数据编码方式。打个比 喻：HTTP就是普通公路，XML就是中间的绿色隔离带和两边的防护栏，SOAP就是普通公路经过加隔离带和防护栏改造过的高速公路。\n\n### 3.3、WSDL\n\n　　好比我们去商店买东西，首先要知道商店里有什么东西可买，然后再来购买，商家的做法就是张贴广告海报。 WebService也一样，WebService客户端要调用一个WebService服务，首先要有知道这个服务的地址在哪，以及这个服务里有什么方 法可以调用，所以，WebService务器端首先要通过一个WSDL文件来说明自己家里有啥服务可以对外调用，服务是什么（服务中有哪些方法，方法接受 的参数是什么，返回值是什么），服务的网络地址用哪个url地址表示，服务通过什么方式来调用。\n\n　　WSDL(Web Services Description Language)就是这样一个基于XML的语言，用于描述Web Service及其函数、参数和返回值。它是WebService客户端和服务器端都 能理解的标准格式。因为是基于XML的，所以WSDL既是机器可阅读的，又是人可阅读的，这将是一个很大的好处。一些最新的开发工具既能根据你的 Web service生成WSDL文档，又能导入WSDL文档，生成调用相应WebService的代理类代码。\n\n　　WSDL 文件保存在Web服务器上，通过一个url地址就可以访问到它。客户端要调用一个WebService服务之前，要知道该服务的WSDL文件的地址。 WebService服务提供商可以通过两种方式来暴露它的WSDL文件地址：1.注册到UDDI服务器，以便被人查找；2.直接告诉给客户端调用者。"]],[1976,1976],[3461,3461]]],[1547285527181,["yongchao@yongchao-PC",[[-1,1976,"### "]],[1976,1979],[1976,1976]]],[1547285532814,["yongchao@yongchao-PC",[[-1,2486,"###"]],[2489,2489],[2486,2486]]],[1547285533030,["yongchao@yongchao-PC",[[-1,2485,"\n"]],[2486,2486],[2485,2485]]],[1547285533958,["yongchao@yongchao-PC",[[1,2485,"\n "]],[2485,2485],[2487,2487]]],[1547285536646,["yongchao@yongchao-PC",[[-1,2818,"### "]],[2822,2822],[2818,2818]]],[1547285610520,["yongchao@yongchao-PC",[[1,3399,"++"],[1,3403,"++"]],[3399,3403],[3399,3407]]],[1547285616752,["yongchao@yongchao-PC",[[1,3421,"**"],[1,3455,"**"]],[3421,3455],[3421,3459]]],[1547285652628,["yongchao@yongchao-PC",[[-1,1328,"   "],[1,1331,"   "],[-1,1586," "],[1,1587," "],[-1,1594," "],[1,1595," "],[-1,1607," "],[1,1608," "],[-1,1630," \n   \n  "],[1,1638," \n   \n  "],[-1,1756," "],[1,1757," "],[-1,1781," "],[1,1782," "],[-1,1810," "],[1,1811," "],[-1,1839," "],[1,1840," "],[-1,1912,"  "],[1,1914,"  "],[1,1976,"~"],[-1,2178," "],[1,2179," "],[-1,2391," "],[1,2392," "],[-1,2645,"  "],[1,2647,"  "],[-1,2678," "],[1,2679," "],[-1,3135," "],[1,3136," "],[-1,3249," "],[1,3250," "]],[1976,1976],[1977,1977]]],[1547285653744,["yongchao@yongchao-PC",[[1,1977," "]],[1977,1977],[1978,1978]]],[1547285658351,["yongchao@yongchao-PC",[[-1,1976,"~ "]],[1978,1978],[1976,1976]]],[1547285660587,["yongchao@yongchao-PC",[[1,1976,"~~~~"]],[1976,1976],[1978,1978]]],[1547285675662,["yongchao@yongchao-PC",[[-1,1976,"~~~~"]],[1980,1980],[1976,1976]]],[1547285692214,["yongchao@yongchao-PC",[[-1,1116,"**"]],[1118,1118],[1116,1116]]],[1547285693838,["yongchao@yongchao-PC",[[-1,1110,"**"]],[1112,1112],[1110,1110]]],[1547285721590,["yongchao@yongchao-PC",[[-1,1107," "]],[1108,1108],[1107,1107]]],[1547285724887,["yongchao@yongchao-PC",[[1,1107," "]],[1107,1107],[1108,1108]]],[1547285727934,["yongchao@yongchao-PC",[[-1,1104,"    "]],[1108,1108],[1104,1104]]],[1547285737927,["yongchao@yongchao-PC",[[1,1106,"**"],[1,1110,"**"]],[1106,1110],[1106,1114]]],[1547302021188,["yongchao@yongchao-PC",[[1,3456,"　　\n"]],[3455,3455],[3458,3458]]],[1547302023020,["yongchao@yongchao-PC",[[-1,3456,"　　"],[1,3458,"\n"]],[3458,3458],[3457,3457]]],[1547302023188,["yongchao@yongchao-PC",[[-1,3457,"\n"]],[3457,3457],[3456,3456]]],[1547302023972,["yongchao@yongchao-PC",[[1,3457,"\n"]],[3456,3456],[3457,3457]]],[1547302104612,["yongchao@yongchao-PC",[[1,3457,"## 四、WebService开发\n\n　　WebService开发可以分为服务器端开发和客户端开发两个方面\n\n### 4.1、服务端开发\n\n　　把公司内部系统的业务方法发布成WebService服务，供远程合作单位和个人调用。(借助一些WebService框架可以很轻松地把自己的业务对象发布成WebService服务，Java方面的典型WebService框架包括：axis，xfire，cxf 等，java ee服务器通常也支持发布WebService服务，例如JBoss。)\n\n### 4.2、客户端开发 \n\n　　调用别人发布的WebService服务，大多数人从事的开发都属于这个方面，例如，调用天气预报WebService服务。（使用厂 商的WSDL2Java之类的工具生成静态调用的代理类代码；使用厂商提供的客户端编程API类；使用SUN公司早期标准的jax-rpc开发包；使用 SUN公司最新标准的jax-ws开发包。当然SUN已被ORACLE收购)\n\n### 4.3、WebService 的工作调用原理\n\n   对客户端而言，我们给这各类WebService客户端API传递wsdl文件的url地址，这些API就会创建出底层的代理类，我调用 这些代理，就可以访问到webservice服务。代理类把客户端的方法调用变成soap格式的请求数据再通过HTTP协议发出去，并把接收到的soap 数据变成返回值返回。对服务端而言，各类WebService框架的本质就是一个大大的Servlet，当远程调用客户端给它通过http协议发送过来 soap格式的请求数据时，它分析这个数据，就知道要调用哪个java类的哪个方法，于是去查找或创建这个对象，并调用其方法，再把方法返回的结果包装成 soap格式的数据，通过http响应消息回给客户端。"]],[3457,3457],[4231,4231]]],[1547302153995,["yongchao@yongchao-PC",[[1,4232,"   \n"]],[4231,4231],[4235,4235]]],[1547302154594,["yongchao@yongchao-PC",[[-1,4232,"   "],[1,4235,"\n"]],[4235,4235],[4233,4233]]],[1547302155475,["yongchao@yongchao-PC",[[1,4233,"## 五、适用场合\n\n### 1、跨防火墙通信\n\n　　如果应用程序有成千上万的用户，而且分布在世界各地，那么客户端和服务器之间的通信将是一个棘手的问题。因为客户端和服务器之间通常会有防火墙或者代理服 务器。在这种情况下，使用DCOM就不是那么简单，通常也不便于把客户端程序发布到数量如此庞大的每一个用户手中。传统的做法是，选择用浏览器作为客户 端，写下一大堆ASP页面，把应用程序的中间层暴露给最终用户。这样做的结果是开发难度大，程序很难维护。如果中间层组件换成WebService的话， 就可以从用户界面直接调用中间层组件。从大多数人的经验来看，在一个用户界面和中间层有较多交互的应用程序中，使用WebService这种结构，可以节 省花在用户界面编程上20%的开发时间。\n\n### 2、应用程序集成\n\n　　企业级的应用程序开发者都知道，企业里经常都要把用不同语言写成的、在不同平台上运行的各种程序集成起来，而这种集成将花费很大的开发力量。应用程序经常 需要从运行在IBM主机上的程序中获取数据；或者把数据发送到主机或UNIX应用程序中去。即使在同一个平台上，不同软件厂商生产的各种软件也常常需要集 成起来。通过WebService，可以很容易的集成不同结构的应用程序。\n\n### 3、B2B集成\n\n　　用WebService集成应用程序，可以使公司内部的商务处理更加自动化。但当交易跨越供应商和客户、突破公司的界限时会怎么样呢？跨公司的商务交易集成通常叫做B2B集成。WebService是B2B集成成功的关键。通过WebService，公司可以把关键的商务应用“暴露”给指定的供应商和客户。例如，把电子下单系统和电子发票系统“暴露”出来，客户就可以以电子的方式发送订单，供应商则可以以电子的方式发送原料采购发票。当然，这并不是一个 新的概念，EDI(电子文档交换)早就是这样了。但是，WebService的实现要比EDI简单得多，而且WebService运行在Internet 上，在世界任何地方都可轻易实现，其运行成本就相对较低。不过，WebService并不像EDI那样，是文档交换或B2B集成的完整解决方案。 WebService只是B2B集成的一个关键部分，还需要许多其它的部分才能实现集成。\n\n　　用WebService来实现B2B集成的最大好处在于可以轻易实现互操作性。只要把商务逻辑“暴露”出来，成为WebService，就可以让任何指定 的合作伙伴调用这些商务逻辑，而不管他们的系统在什么平台上运行，使用什么开发语言。这样就大大减少了花在B2B集成上的时间和成本，让许多原本无法承受 EDI的中小企业也能实现B2B集成。\n\n### 4、软件和数据重用\n\n      软件重用是一个很大的主题，重用的形式很多，重用的程度有大有小。最基本的形式是源代码模块或者类一级的重用，一种形式是二进制形式的组件重用。采用 WebService应用程序可以用标准的方法把功能和数据“暴露”出来，供其它应用程序使用，达到业务级重用。"]],[4233,4233],[5501,5501]]],[1547302871925,["yongchao@yongchao-PC",[[1,5502,"      \n"]],[5501,5501],[5508,5508]]],[1547302872132,["yongchao@yongchao-PC",[[-1,5502,"      "],[1,5508,"\n"]],[5508,5508],[5503,5503]]],[1547302885758,["yongchao@yongchao-PC",[[1,5503,"## 六、不适用场合\n\n### 1、单机应用程序\n\n 目前，企业和个人还使用着很多桌面应用程序。其中一些只需要与本机上的其它程序通信。在这种情况下，最好就不要用WebService，只要用本地的 API就可以了。COM非常适合于在这种情况下工作，因为它既小又快。运行在同一台服务器上的服务器软件也是这样。最好直接用COM或其它本地的API来 进行应用程序间的调用。当然WebService也能用在这些场合，但那样不仅消耗太大，而且不会带来任何好处。\n\n### 2、局域网的同构应用程序\n\n 在许多应用中，所有的程序都是用VB或VC开发的，都在Windows平台下使用COM，都运行在同一个局域网上。例如，有两个服务器应用程序需要相互通 信，或者有一个Win32或WinForm的客户程序要连接局域网上另一个服务器的程序。在这些程序里，使用DCOM会比SOAP/HTTP有效得多。与 此相类似，如果一个.NET程序要连接到局域网上的另一个.NET程序，应该使用.NETremoting。有趣的是，在.NETremoting 中，也可以指定使用SOAP/HTTP来进行WebService调用。不过最好还是直接通过TCP进行RPC调用，那样会有效得多。\n\n　　转载网上的一篇讲得比较好的文章，具体链接地址忘记了，原作者要是要是看到还望提醒一声，我好加上去。"]],[5503,5503],[6079,6079]]],[1547302890837,["yongchao@yongchao-PC",[[-1,6029,"　　转载网上的一篇讲得比较好的文章，具体链接地址忘记了，原作者要是要是看到还望提醒一声，我好加上去。"]],[6029,6079],[6029,6029]]]],null,"yongchao@yongchao-PC"],["1a2a2b84-fefb-4a10-935b-f1008d687c40",1547367284353,"# WebService\n\n* https://www.cnblogs.com/xdp-gacl/p/4048937.html\n## 一、序言\n当前的应用程序开发逐步的呈现了两种迥然不同的倾向：\n一种是基于浏览器的瘦客户端应用程序，\n一种是基于浏览器的富客户端应用程序（RIA），当然后一种技术相对来说更加的时髦一些（如现在很流行的Html5技术），这里主要讲前者。\n\n基于浏览器的瘦客户端应用程序并不是 因为瘦客户能够提供更好的用户界面，而是因为它能够避免花在桌面应用程序发布上的高成本。发布桌面应用程序成本很高，一半是因为应用程序安装和配置的问 题，另一半是因为客户和服务器之间通信的问题。传统的Windows富客户应用程序使用DCOM来与服务器进行通信和调用远程对象。配置好DCOM使其在 一个大型的网络中正常工作将是一个极富挑战性的工作，同时也是许多IT工程师的噩梦。事实上，许多IT工程师宁愿忍受浏览器所带来的功能限制，也不愿在局 域网上去运行一个DCOM。**关于客户端与服务器的通信问题，一个完美的解决方法是使用HTTP协议来通信**。这是因为任何运行Web浏览器的机器都在使用 HTTP协议。同时，当前许多防火墙也配置为只允许HTTP连接。许多商用程序还面临另一个问题，那就是与其他程序的互操作性。如果所有的应用程序都是使 用COM或.NET语言写的，并且都运行在Windows平台上，那就天下太平了。然而，事实上大多数商业数据仍然在大型主机上以非关系文件(VSAM) 的形式存放，并由COBOL语言编写的大型机程序访问。而且，目前还有很多商用程序继续在使用C++、Java、Visual Basic和其他各种各样 的语言编写。现在，除了最简单的程序之外，所有的应用程序都需要与运行在其他异构平台上的应用程序集成并进行数据交换。这样的任务通常都是由特殊的方法， 如文件传输和分析，消息队列，还有仅适用于某些情况的的API，如IBM的高级程序到程序交流(APPC)等来完成的。在以前，没有一个应用程序通信标 准，是独立于平台、组建模型和编程语言的。只有通过Web Service，客户端和服务器才能够自由的用HTTP进行通信，不论两个程序的平台和编程语言是什么。\n\n## 二、WebService到底是什么\n**WebService是一种跨编程语言和跨操作系统平台的远程调用技术。**\n    所谓**跨编程语言和跨操作平台**，就是说服务端程序采用java编写，客户端程序则可以采用其他编程语言编写，反之亦然！跨操作系统平台则是指服务端程序和客户端程序可以在不同的操作系统上运行。\n    \n所谓**远程调用**，就是一台计算机a上 的一个程序可以调用到另外一台计算机b上的一个对象的方法，譬如，银联提供给商场的pos刷卡系统，商场的POS机转账调用的转账方法的代码其实是跑在银 行服务器上。再比如，amazon，天气预报系统，淘宝网，校内网，百度等把自己的系统服务以webservice服务的形式暴露出来，让第三方网站和程 序可以调用这些服务功能，这样扩展了自己系统的市场占有率，往大的概念上吹，就是所谓的SOA应用。\n    \n   其实可以从多个角度来理解 WebService，从表面上看，++WebService就是一个应用程序向外界暴露出一个能通过Web进行调用的API，也就是说能用编程的方法通过 Web来调用这个应用程序++。我们把调用这个WebService的应用程序叫做客户端，而把提供这个WebService的应用程序叫做服务端。从深层次 看，WebService是建立可互操作的分布式应用程序的新平台，是一个平台，是一套标准。它定义了应用程序如何在Web上实现互操作性，你可以用任何你喜欢的语言，在任何你喜欢的平台上写Web service ，只要我们可以通过Web service标准对这些服务进行查询和访问。 \n   \n   WebService平台需要一套协议来实现分布式应用程序的创建。任何平台都有它的数据表示方法和类型系统。要实现互操作性，WebService平台 必须提供一套标准的类型系统，用于沟通不同平台、编程语言和组件模型中的不同类型系统。Web service平台必须提供一种标准来描述 Web service，让客户可以得到足够的信息来调用这个Web service。最后，我们还必须有一种方法来对这个Web service进行远程调用,这种方法实际是一种**远程过程调用协议(RPC)**。为了达到互操作性，这种RPC协议还必须与平台和编程语言无关。\n   \n## 三、WebService平台技术\nXML+XSD,SOAP和WSDL就是构成WebService平台的三大技术。\n3.1、XML+XSD\n\n　　WebService采用HTTP协议传输数据，采用XML格式封装数据（即XML中说明调用远程服务对象的哪个方法，传递的参数是什么，以及服务对象的 返回结果是什么）。XML是WebService平台中表示数据的格式。除了易于建立和易于分析外，XML主要的优点在于它既是平台无关的，又是厂商无关 的。无关性是比技术优越性更重要的：软件厂商是不会选择一个由竞争对手所发明的技术的。 \n\n　　XML解决了数据表示的问题，但它没有定义一套标准的数据类型，更没有说怎么去扩展这套数据类型。例如，整形数到底代表什么？16位，32位，64位？这 些细节对实现互操作性很重要。XML Schema(XSD)就是专门解决这个问题的一套标准。它定义了一套标准的数据类型，并给出了一种语言来扩展这套数据类型。WebService平台就 是用XSD来作为其数据类型系统的。当你用某种语言(如VB.NET或C#)来构造一个Web service时，为了符合WebService标准，所 有你使用的数据类型都必须被转换为XSD类型。你用的工具可能已经自动帮你完成了这个转换，但你很可能会根据你的需要修改一下转换过程。\n\n  3.2、SOAP\n\n WebService通过HTTP协议发送请求和接收结果时，发送的请求内容和结果内容都采用XML格式封装，并增加了一些特定的HTTP消息头，以说明 HTTP消息的内容格式，这些特定的HTTP消息头和XML内容格式就是SOAP协议。SOAP提供了标准的RPC方法来调用Web Service。\n\n  **SOAP协议 = HTTP协议 + XML数据格式**\n\n  SOAP协议定义了SOAP消息的格式，SOAP协议是基于HTTP协议的，SOAP也是基于XML和XSD的，XML是SOAP的数据编码方式。打个比 喻：HTTP就是普通公路，XML就是中间的绿色隔离带和两边的防护栏，SOAP就是普通公路经过加隔离带和防护栏改造过的高速公路。\n\n3.3、WSDL\n\n　　好比我们去商店买东西，首先要知道商店里有什么东西可买，然后再来购买，商家的做法就是张贴广告海报。 WebService也一样，WebService客户端要调用一个WebService服务，首先要有知道这个服务的地址在哪，以及这个服务里有什么方 法可以调用，所以，WebService务器端首先要通过一个WSDL文件来说明自己家里有啥服务可以对外调用，服务是什么（服务中有哪些方法，方法接受 的参数是什么，返回值是什么），服务的网络地址用哪个url地址表示，服务通过什么方式来调用。\n\n　　WSDL(Web Services Description Language)就是这样一个基于XML的语言，用于描述Web Service及其函数、参数和返回值。它是WebService客户端和服务器端都 能理解的标准格式。因为是基于XML的，所以WSDL既是机器可阅读的，又是人可阅读的，这将是一个很大的好处。一些最新的开发工具既能根据你的 Web service生成WSDL文档，又能导入WSDL文档，生成调用相应WebService的代理类代码。\n\n　　WSDL 文件保存在Web服务器上，通过一个url地址就可以访问到它。客户端要调用一个WebService服务之前，要知道该服务的WSDL文件的地址。 WebService服务提供商可以通过++两种方式++来暴露它的WSDL文件地址：**1.注册到UDDI服务器，以便被人查找；2.直接告诉给客户端调用者。**\n\n## 四、WebService开发\n\n　　WebService开发可以分为服务器端开发和客户端开发两个方面\n\n### 4.1、服务端开发\n\n　　把公司内部系统的业务方法发布成WebService服务，供远程合作单位和个人调用。(借助一些WebService框架可以很轻松地把自己的业务对象发布成WebService服务，Java方面的典型WebService框架包括：axis，xfire，cxf 等，java ee服务器通常也支持发布WebService服务，例如JBoss。)\n\n### 4.2、客户端开发 \n\n　　调用别人发布的WebService服务，大多数人从事的开发都属于这个方面，例如，调用天气预报WebService服务。（使用厂 商的WSDL2Java之类的工具生成静态调用的代理类代码；使用厂商提供的客户端编程API类；使用SUN公司早期标准的jax-rpc开发包；使用 SUN公司最新标准的jax-ws开发包。当然SUN已被ORACLE收购)\n\n### 4.3、WebService 的工作调用原理\n\n   对客户端而言，我们给这各类WebService客户端API传递wsdl文件的url地址，这些API就会创建出底层的代理类，我调用 这些代理，就可以访问到webservice服务。代理类把客户端的方法调用变成soap格式的请求数据再通过HTTP协议发出去，并把接收到的soap 数据变成返回值返回。对服务端而言，各类WebService框架的本质就是一个大大的Servlet，当远程调用客户端给它通过http协议发送过来 soap格式的请求数据时，它分析这个数据，就知道要调用哪个java类的哪个方法，于是去查找或创建这个对象，并调用其方法，再把方法返回的结果包装成 soap格式的数据，通过http响应消息回给客户端。\n\n## 五、适用场合\n\n### 1、跨防火墙通信\n\n　　如果应用程序有成千上万的用户，而且分布在世界各地，那么客户端和服务器之间的通信将是一个棘手的问题。因为客户端和服务器之间通常会有防火墙或者代理服 务器。在这种情况下，使用DCOM就不是那么简单，通常也不便于把客户端程序发布到数量如此庞大的每一个用户手中。传统的做法是，选择用浏览器作为客户 端，写下一大堆ASP页面，把应用程序的中间层暴露给最终用户。这样做的结果是开发难度大，程序很难维护。如果中间层组件换成WebService的话， 就可以从用户界面直接调用中间层组件。从大多数人的经验来看，在一个用户界面和中间层有较多交互的应用程序中，使用WebService这种结构，可以节 省花在用户界面编程上20%的开发时间。\n\n### 2、应用程序集成\n\n　　企业级的应用程序开发者都知道，企业里经常都要把用不同语言写成的、在不同平台上运行的各种程序集成起来，而这种集成将花费很大的开发力量。应用程序经常 需要从运行在IBM主机上的程序中获取数据；或者把数据发送到主机或UNIX应用程序中去。即使在同一个平台上，不同软件厂商生产的各种软件也常常需要集 成起来。通过WebService，可以很容易的集成不同结构的应用程序。\n\n### 3、B2B集成\n\n　　用WebService集成应用程序，可以使公司内部的商务处理更加自动化。但当交易跨越供应商和客户、突破公司的界限时会怎么样呢？跨公司的商务交易集成通常叫做B2B集成。WebService是B2B集成成功的关键。通过WebService，公司可以把关键的商务应用“暴露”给指定的供应商和客户。例如，把电子下单系统和电子发票系统“暴露”出来，客户就可以以电子的方式发送订单，供应商则可以以电子的方式发送原料采购发票。当然，这并不是一个 新的概念，EDI(电子文档交换)早就是这样了。但是，WebService的实现要比EDI简单得多，而且WebService运行在Internet 上，在世界任何地方都可轻易实现，其运行成本就相对较低。不过，WebService并不像EDI那样，是文档交换或B2B集成的完整解决方案。 WebService只是B2B集成的一个关键部分，还需要许多其它的部分才能实现集成。\n\n　　用WebService来实现B2B集成的最大好处在于可以轻易实现互操作性。只要把商务逻辑“暴露”出来，成为WebService，就可以让任何指定 的合作伙伴调用这些商务逻辑，而不管他们的系统在什么平台上运行，使用什么开发语言。这样就大大减少了花在B2B集成上的时间和成本，让许多原本无法承受 EDI的中小企业也能实现B2B集成。\n\n### 4、软件和数据重用\n\n      软件重用是一个很大的主题，重用的形式很多，重用的程度有大有小。最基本的形式是源代码模块或者类一级的重用，一种形式是二进制形式的组件重用。采用 WebService应用程序可以用标准的方法把功能和数据“暴露”出来，供其它应用程序使用，达到业务级重用。\n\n## 六、不适用场合\n\n### 1、单机应用程序\n\n 目前，企业和个人还使用着很多桌面应用程序。其中一些只需要与本机上的其它程序通信。在这种情况下，最好就不要用WebService，只要用本地的 API就可以了。COM非常适合于在这种情况下工作，因为它既小又快。运行在同一台服务器上的服务器软件也是这样。最好直接用COM或其它本地的API来 进行应用程序间的调用。当然WebService也能用在这些场合，但那样不仅消耗太大，而且不会带来任何好处。\n\n### 2、局域网的同构应用程序\n\n 在许多应用中，所有的程序都是用VB或VC开发的，都在Windows平台下使用COM，都运行在同一个局域网上。例如，有两个服务器应用程序需要相互通 信，或者有一个Win32或WinForm的客户程序要连接局域网上另一个服务器的程序。在这些程序里，使用DCOM会比SOAP/HTTP有效得多。与 此相类似，如果一个.NET程序要连接到局域网上的另一个.NET程序，应该使用.NETremoting。有趣的是，在.NETremoting 中，也可以指定使用SOAP/HTTP来进行WebService调用。不过最好还是直接通过TCP进行RPC调用，那样会有效得多。\n\n\n",[[1547367271697,["yongchao@yongchao-PC",[[1,6030,"\n"]],[6029,6029],[6030,6030]]],[1547367271826,["yongchao@yongchao-PC",[[1,6031,"\n"]],[6030,6030],[6031,6031]]],[1547367272840,["yongchao@yongchao-PC",[[1,6031,"## 一、WebService是什么？\n\n　　1\\. 基于Web的服务：服务器端整出一些资源让客户端应用访问（获取数据）\n\n　　2\\. 一个跨语言、跨平台的规范（抽象）\n\n　　3\\. 多个跨平台、跨语言的应用间通信整合的方案（实际）\n\n## 二、为什么要用Web service？\n\n　　web service能解决：\n\n1.  跨平台调用\n2.  **跨语言调用**\n3.  远程调用\n\n## 三、什么时候使用web Service?\n\n　　1\\. 同一家公司的新旧应用之间\n\n　　2\\. 不同公司的应用之间\n\n　　3\\. 一些提供数据的内容聚合应用：天气预报、股票行情\n\n## 四、Web Service中的几个重要术语\n\n### 4.1、WSDL(web service definition language)\n\nWSDL是webservice定义语言, 对应.wsdl文档, 一个webservice会对应一个唯一的wsdl文档, 定义了客户端与服务端发送请求和响应的数据格式和过程\n\n### 4.2、SOAP(simple object  access protocal)\n\n　　SOAP是\"**简单对象访问协议**\"\n\n1.  是一种简单的、基于**HTTP****和**[**XML**](http://baike.baidu.com/view/63.htm)**的协议**, 用于在WEB上交换**结构化的数据**\n2.  soap消息：**请求消息**和**响应消息**\n\n### 4.3、SEI(WebService EndPoint Interface)\n\n**　　SEI是web service****的终端接口，**就是WebService服务器端用来处理请求的接口\n\n### 4.4、CXF(Celtix + XFire)\n\n　　一个apache的用于开发webservice服务器端和客户端的框架。"]],[6031,6031],[6846,6846]]],[1547367295503,["yongchao@yongchao-PC",[[-1,3712," "],[1,3713," "],[-1,3919,"  "],[1,3921,"  "],[-1,5371,"     "],[1,5376,"     "],[1,6030,"#"],[-1,6506," "],[1,6507," "]],[6030,6030],[6031,6031]]],[1547367296739,["yongchao@yongchao-PC",[[1,6031,"zong"]],[6031,6031],[6035,6035]]],[1547367297650,["yongchao@yongchao-PC",[[-1,6031,"zong"]],[6035,6035],[6031,6031]]],[1547367301187,["yongchao@yongchao-PC",[[1,6031,"归纳"]],[6031,6031],[6033,6033]]],[1547367308548,["yongchao@yongchao-PC",[[1,6031," "]],[6031,6031],[6032,6032]]],[1547367320627,["yongchao@yongchao-PC",[[-1,6210,"**"]],[6212,6212],[6210,6210]]],[1547367321563,["yongchao@yongchao-PC",[[-1,6215,"**"]],[6217,6217],[6215,6215]]],[1547367349019,["yongchao@yongchao-PC",[[-1,5374,"   "]],[5377,5377],[5374,5374]]],[1547372099232,["yongchao@yongchao-PC",[[1,6844,"　　\n"]],[6843,6843],[6846,6846]]],[1547372099575,["yongchao@yongchao-PC",[[-1,6844,"　　"],[1,6846,"\n"]],[6846,6846],[6845,6845]]],[1547372099758,["yongchao@yongchao-PC",[[1,6846,"\n"]],[6845,6845],[6846,6846]]],[1547372099927,["yongchao@yongchao-PC",[[1,6847,"\n"]],[6846,6846],[6847,6847]]],[1547372100136,["yongchao@yongchao-PC",[[1,6848,"\n"]],[6847,6847],[6848,6848]]],[1547372110442,["yongchao@yongchao-PC",[[1,6848,"## [调用第三方提供的webService服务](https://www.cnblogs.com/xdp-gacl/p/4260627.html)"]],[6848,6848],[6922,6922]]],[1547372138376,["yongchao@yongchao-PC",[[1,6923,"\n"]],[6922,6922],[6923,6923]]],[1547372139271,["yongchao@yongchao-PC",[[1,6924,"\n"]],[6923,6923],[6924,6924]]],[1547372139640,["yongchao@yongchao-PC",[[1,6924,"http://www.webxml.com.cn/zh_cn/web_services.aspx"]],[6924,6924],[6972,6972]]],[1547372155696,["yongchao@yongchao-PC",[[1,6973,"\n"]],[6972,6972],[6973,6973]]],[1547372156043,["yongchao@yongchao-PC",[[1,6973,"找到WebService的wsdl描述"]],[6973,6973],[6992,6992]]],[1547372163841,["yongchao@yongchao-PC",[[1,6993,"\n"]],[6992,6992],[6993,6993]]],[1547372164063,["yongchao@yongchao-PC",[[1,6993,"借助wsimport命令工具自动生成客户端代码"]],[6993,6993],[7016,7016]]],[1547372175896,["yongchao@yongchao-PC",[[1,7017,"\n"]],[7016,7016],[7017,7017]]],[1547372176121,["yongchao@yongchao-PC",[[1,7017,"执行\"wsimport -keep [http://webservice.webxml.com.cn/WebServices/WeatherWS.asmx?wsdl](http://webservice.webxml.com.cn/WebServices/WeatherWS.asmx?wsdl)\"生成客户端代码"]],[7017,7017],[7173,7173]]],[1547372182782,["yongchao@yongchao-PC",[[-1,7034," ["]],[7036,7036],[7034,7034]]],[1547372184272,["yongchao@yongchao-PC",[[1,7034," "]],[7034,7034],[7035,7035]]],[1547372192128,["yongchao@yongchao-PC",[[-1,7098,"](http://webservice.webxml.com.cn/WebServices/WeatherWS.asmx?wsdl)"]],[7099,7099],[7098,7098]]],[1547372221288,["yongchao@yongchao-PC",[[1,7107,"\n"]],[7106,7106],[7107,7107]]],[1547372222040,["yongchao@yongchao-PC",[[1,7107,"运行结果显示，使用wsimport工具直接生成客户端代码会抛异常, 无法生成客户端代码, 只是因为我们要调用的WebService是用.net写的，这个是Java调用net的webservice都有的问题，这个问题的解决办法如下："]],[7107,7107],[7222,7222]]],[1547372244273,["yongchao@yongchao-PC",[[1,7223,"\n"]],[7222,7222],[7223,7223]]],[1547372244935,["yongchao@yongchao-PC",[[1,7223,"1.  将对应的wsdl文档保存到本地\n\n　　![](WebService%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93(%E5%9B%9B)%E2%80%94%E2%80%94%E8%B0%83%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8F%90%E4%BE%9B%E7%9A%84webService%E6%9C%8D%E5%8A%A1%20-%20%E5%AD%A4%E5%82%B2%E8%8B%8D%E7%8B%BC%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/291843172539113.gif)\n\n　　2、修改wsdl文档的部分内容:**将** **<s:element ref=\"s:schema\" /><s:any />** 替换成 **<s:any minOccurs=\"2\" maxOccurs=\"2\"/>**\n\n**　　![](WebService%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93(%E5%9B%9B)%E2%80%94%E2%80%94%E8%B0%83%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8F%90%E4%BE%9B%E7%9A%84webService%E6%9C%8D%E5%8A%A1%20-%20%E5%AD%A4%E5%82%B2%E8%8B%8D%E7%8B%BC%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/291851362693798.gif)**\n\n　　再次执行wsimport生成代码，这次使用保存在本地的WeatherWS.wsdl文件来进行生成"]],[7223,7223],[7984,7984]]],[1547372251016,["yongchao@yongchao-PC",[[-1,7244,"　　![](WebService%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93(%E5%9B%9B)%E2%80%94%E2%80%94%E8%B0%83%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8F%90%E4%BE%9B%E7%9A%84webService%E6%9C%8D%E5%8A%A1%20-%20%E5%AD%A4%E5%82%B2%E8%8B%8D%E7%8B%BC%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/291843172539113.gif)\n"]],[7243,7529],[7243,7243]]],[1547372251567,["yongchao@yongchao-PC",[[-1,7244,"\n"]],[7243,7243],[7242,7242]]],[1547372252904,["yongchao@yongchao-PC",[[-1,7243,"\n"]],[7243,7243],[7242,7242]]],[1547372254681,["yongchao@yongchao-PC",[[-1,7242,"\n"]],[7243,7243],[7242,7242]]],[1547372256754,["yongchao@yongchao-PC",[[1,7244,"\n"]],[7244,7244],[7245,7245]]],[1547372258368,["yongchao@yongchao-PC",[[-1,7246,"、"]],[7247,7247],[7246,7246]]],[1547372259232,["yongchao@yongchao-PC",[[-1,7151," "],[1,7152," "],[1,7246,"."],[-1,7265," "],[1,7266," "],[-1,7307," 替换成 "],[1,7312," 替换成 "]],[7246,7246],[7247,7247]]],[1547372260279,["yongchao@yongchao-PC",[[1,7247," "]],[7247,7247],[7248,7248]]],[1547372271743,["yongchao@yongchao-PC",[[-1,7262,"**"]],[7264,7264],[7262,7262]]],[1547372273030,["yongchao@yongchao-PC",[[-1,7263,"**"]],[7264,7265],[7263,7263]]],[1547372273807,["yongchao@yongchao-PC",[[-1,7265,"*"]],[7265,7265],[7264,7264]]],[1547372274638,["yongchao@yongchao-PC",[[-1,7264,"*"]],[7265,7265],[7264,7264]]],[1547372275648,["yongchao@yongchao-PC",[[-1,7301,"**"]],[7303,7303],[7301,7301]]],[1547372277383,["yongchao@yongchao-PC",[[-1,7306,"**"]],[7308,7308],[7306,7306]]],[1547372278215,["yongchao@yongchao-PC",[[-1,7342,"**"]],[7344,7344],[7342,7342]]],[1547372281359,["yongchao@yongchao-PC",[[-1,7344,"**　　![](WebService%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93(%E5%9B%9B)%E2%80%94%E2%80%94%E8%B0%83%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8F%90%E4%BE%9B%E7%9A%84webService%E6%9C%8D%E5%8A%A1%20-%20%E5%AD%A4%E5%82%B2%E8%8B%8D%E7%8B%BC%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/291851362693798.gif)**\n"]],[7343,7633],[7343,7343]]],[1547372284783,["yongchao@yongchao-PC",[[1,7343,"3."]],[7343,7343],[7345,7345]]],[1547372286817,["yongchao@yongchao-PC",[[-1,7347,"　　"]],[7349,7349],[7347,7347]]],[1547372287031,["yongchao@yongchao-PC",[[-1,7346,"\n"]],[7347,7347],[7346,7346]]],[1547372287271,["yongchao@yongchao-PC",[[-1,7345,"\n"]],[7346,7346],[7345,7345]]],[1547372288294,["yongchao@yongchao-PC",[[1,7345," "]],[7345,7345],[7346,7346]]],[1547372311847,["yongchao@yongchao-PC",[[-1,6849,"#"]],[6850,6850],[6849,6849]]]],null,"yongchao@yongchao-PC"],["b4cb0b8c-dc2e-4d9c-981f-1979d91575fc",1547467073955,"# WebService\n\n* https://www.cnblogs.com/xdp-gacl/p/4048937.html\n## 一、序言\n当前的应用程序开发逐步的呈现了两种迥然不同的倾向：\n一种是基于浏览器的瘦客户端应用程序，\n一种是基于浏览器的富客户端应用程序（RIA），当然后一种技术相对来说更加的时髦一些（如现在很流行的Html5技术），这里主要讲前者。\n\n基于浏览器的瘦客户端应用程序并不是 因为瘦客户能够提供更好的用户界面，而是因为它能够避免花在桌面应用程序发布上的高成本。发布桌面应用程序成本很高，一半是因为应用程序安装和配置的问 题，另一半是因为客户和服务器之间通信的问题。传统的Windows富客户应用程序使用DCOM来与服务器进行通信和调用远程对象。配置好DCOM使其在 一个大型的网络中正常工作将是一个极富挑战性的工作，同时也是许多IT工程师的噩梦。事实上，许多IT工程师宁愿忍受浏览器所带来的功能限制，也不愿在局 域网上去运行一个DCOM。**关于客户端与服务器的通信问题，一个完美的解决方法是使用HTTP协议来通信**。这是因为任何运行Web浏览器的机器都在使用 HTTP协议。同时，当前许多防火墙也配置为只允许HTTP连接。许多商用程序还面临另一个问题，那就是与其他程序的互操作性。如果所有的应用程序都是使 用COM或.NET语言写的，并且都运行在Windows平台上，那就天下太平了。然而，事实上大多数商业数据仍然在大型主机上以非关系文件(VSAM) 的形式存放，并由COBOL语言编写的大型机程序访问。而且，目前还有很多商用程序继续在使用C++、Java、Visual Basic和其他各种各样 的语言编写。现在，除了最简单的程序之外，所有的应用程序都需要与运行在其他异构平台上的应用程序集成并进行数据交换。这样的任务通常都是由特殊的方法， 如文件传输和分析，消息队列，还有仅适用于某些情况的的API，如IBM的高级程序到程序交流(APPC)等来完成的。在以前，没有一个应用程序通信标 准，是独立于平台、组建模型和编程语言的。只有通过Web Service，客户端和服务器才能够自由的用HTTP进行通信，不论两个程序的平台和编程语言是什么。\n\n## 二、WebService到底是什么\n**WebService是一种跨编程语言和跨操作系统平台的远程调用技术。**\n    所谓**跨编程语言和跨操作平台**，就是说服务端程序采用java编写，客户端程序则可以采用其他编程语言编写，反之亦然！跨操作系统平台则是指服务端程序和客户端程序可以在不同的操作系统上运行。\n    \n所谓**远程调用**，就是一台计算机a上 的一个程序可以调用到另外一台计算机b上的一个对象的方法，譬如，银联提供给商场的pos刷卡系统，商场的POS机转账调用的转账方法的代码其实是跑在银 行服务器上。再比如，amazon，天气预报系统，淘宝网，校内网，百度等把自己的系统服务以webservice服务的形式暴露出来，让第三方网站和程 序可以调用这些服务功能，这样扩展了自己系统的市场占有率，往大的概念上吹，就是所谓的SOA应用。\n    \n   其实可以从多个角度来理解 WebService，从表面上看，++WebService就是一个应用程序向外界暴露出一个能通过Web进行调用的API，也就是说能用编程的方法通过 Web来调用这个应用程序++。我们把调用这个WebService的应用程序叫做客户端，而把提供这个WebService的应用程序叫做服务端。从深层次 看，WebService是建立可互操作的分布式应用程序的新平台，是一个平台，是一套标准。它定义了应用程序如何在Web上实现互操作性，你可以用任何你喜欢的语言，在任何你喜欢的平台上写Web service ，只要我们可以通过Web service标准对这些服务进行查询和访问。 \n   \n   WebService平台需要一套协议来实现分布式应用程序的创建。任何平台都有它的数据表示方法和类型系统。要实现互操作性，WebService平台 必须提供一套标准的类型系统，用于沟通不同平台、编程语言和组件模型中的不同类型系统。Web service平台必须提供一种标准来描述 Web service，让客户可以得到足够的信息来调用这个Web service。最后，我们还必须有一种方法来对这个Web service进行远程调用,这种方法实际是一种**远程过程调用协议(RPC)**。为了达到互操作性，这种RPC协议还必须与平台和编程语言无关。\n   \n## 三、WebService平台技术\nXML+XSD,SOAP和WSDL就是构成WebService平台的三大技术。\n3.1、XML+XSD\n\n　　WebService采用HTTP协议传输数据，采用XML格式封装数据（即XML中说明调用远程服务对象的哪个方法，传递的参数是什么，以及服务对象的 返回结果是什么）。XML是WebService平台中表示数据的格式。除了易于建立和易于分析外，XML主要的优点在于它既是平台无关的，又是厂商无关 的。无关性是比技术优越性更重要的：软件厂商是不会选择一个由竞争对手所发明的技术的。 \n\n　　XML解决了数据表示的问题，但它没有定义一套标准的数据类型，更没有说怎么去扩展这套数据类型。例如，整形数到底代表什么？16位，32位，64位？这 些细节对实现互操作性很重要。XML Schema(XSD)就是专门解决这个问题的一套标准。它定义了一套标准的数据类型，并给出了一种语言来扩展这套数据类型。WebService平台就 是用XSD来作为其数据类型系统的。当你用某种语言(如VB.NET或C#)来构造一个Web service时，为了符合WebService标准，所 有你使用的数据类型都必须被转换为XSD类型。你用的工具可能已经自动帮你完成了这个转换，但你很可能会根据你的需要修改一下转换过程。\n\n  3.2、SOAP\n\n WebService通过HTTP协议发送请求和接收结果时，发送的请求内容和结果内容都采用XML格式封装，并增加了一些特定的HTTP消息头，以说明 HTTP消息的内容格式，这些特定的HTTP消息头和XML内容格式就是SOAP协议。SOAP提供了标准的RPC方法来调用Web Service。\n\n  **SOAP协议 = HTTP协议 + XML数据格式**\n\n  SOAP协议定义了SOAP消息的格式，SOAP协议是基于HTTP协议的，SOAP也是基于XML和XSD的，XML是SOAP的数据编码方式。打个比 喻：HTTP就是普通公路，XML就是中间的绿色隔离带和两边的防护栏，SOAP就是普通公路经过加隔离带和防护栏改造过的高速公路。\n\n3.3、WSDL\n\n　　好比我们去商店买东西，首先要知道商店里有什么东西可买，然后再来购买，商家的做法就是张贴广告海报。 WebService也一样，WebService客户端要调用一个WebService服务，首先要有知道这个服务的地址在哪，以及这个服务里有什么方 法可以调用，所以，WebService务器端首先要通过一个WSDL文件来说明自己家里有啥服务可以对外调用，服务是什么（服务中有哪些方法，方法接受 的参数是什么，返回值是什么），服务的网络地址用哪个url地址表示，服务通过什么方式来调用。\n\n　　WSDL(Web Services Description Language)就是这样一个基于XML的语言，用于描述Web Service及其函数、参数和返回值。它是WebService客户端和服务器端都 能理解的标准格式。因为是基于XML的，所以WSDL既是机器可阅读的，又是人可阅读的，这将是一个很大的好处。一些最新的开发工具既能根据你的 Web service生成WSDL文档，又能导入WSDL文档，生成调用相应WebService的代理类代码。\n\n　　WSDL 文件保存在Web服务器上，通过一个url地址就可以访问到它。客户端要调用一个WebService服务之前，要知道该服务的WSDL文件的地址。 WebService服务提供商可以通过++两种方式++来暴露它的WSDL文件地址：**1.注册到UDDI服务器，以便被人查找；2.直接告诉给客户端调用者。**\n\n## 四、WebService开发\n\n　　WebService开发可以分为服务器端开发和客户端开发两个方面\n\n### 4.1、服务端开发\n\n　　把公司内部系统的业务方法发布成WebService服务，供远程合作单位和个人调用。(借助一些WebService框架可以很轻松地把自己的业务对象发布成WebService服务，Java方面的典型WebService框架包括：axis，xfire，cxf 等，java ee服务器通常也支持发布WebService服务，例如JBoss。)\n\n### 4.2、客户端开发 \n\n　　调用别人发布的WebService服务，大多数人从事的开发都属于这个方面，例如，调用天气预报WebService服务。（使用厂 商的WSDL2Java之类的工具生成静态调用的代理类代码；使用厂商提供的客户端编程API类；使用SUN公司早期标准的jax-rpc开发包；使用 SUN公司最新标准的jax-ws开发包。当然SUN已被ORACLE收购)\n\n### 4.3、WebService 的工作调用原理\n\n   对客户端而言，我们给这各类WebService客户端API传递wsdl文件的url地址，这些API就会创建出底层的代理类，我调用 这些代理，就可以访问到webservice服务。代理类把客户端的方法调用变成soap格式的请求数据再通过HTTP协议发出去，并把接收到的soap 数据变成返回值返回。对服务端而言，各类WebService框架的本质就是一个大大的Servlet，当远程调用客户端给它通过http协议发送过来 soap格式的请求数据时，它分析这个数据，就知道要调用哪个java类的哪个方法，于是去查找或创建这个对象，并调用其方法，再把方法返回的结果包装成 soap格式的数据，通过http响应消息回给客户端。\n\n## 五、适用场合\n\n### 1、跨防火墙通信\n\n　　如果应用程序有成千上万的用户，而且分布在世界各地，那么客户端和服务器之间的通信将是一个棘手的问题。因为客户端和服务器之间通常会有防火墙或者代理服 务器。在这种情况下，使用DCOM就不是那么简单，通常也不便于把客户端程序发布到数量如此庞大的每一个用户手中。传统的做法是，选择用浏览器作为客户 端，写下一大堆ASP页面，把应用程序的中间层暴露给最终用户。这样做的结果是开发难度大，程序很难维护。如果中间层组件换成WebService的话， 就可以从用户界面直接调用中间层组件。从大多数人的经验来看，在一个用户界面和中间层有较多交互的应用程序中，使用WebService这种结构，可以节 省花在用户界面编程上20%的开发时间。\n\n### 2、应用程序集成\n\n　　企业级的应用程序开发者都知道，企业里经常都要把用不同语言写成的、在不同平台上运行的各种程序集成起来，而这种集成将花费很大的开发力量。应用程序经常 需要从运行在IBM主机上的程序中获取数据；或者把数据发送到主机或UNIX应用程序中去。即使在同一个平台上，不同软件厂商生产的各种软件也常常需要集 成起来。通过WebService，可以很容易的集成不同结构的应用程序。\n\n### 3、B2B集成\n\n　　用WebService集成应用程序，可以使公司内部的商务处理更加自动化。但当交易跨越供应商和客户、突破公司的界限时会怎么样呢？跨公司的商务交易集成通常叫做B2B集成。WebService是B2B集成成功的关键。通过WebService，公司可以把关键的商务应用“暴露”给指定的供应商和客户。例如，把电子下单系统和电子发票系统“暴露”出来，客户就可以以电子的方式发送订单，供应商则可以以电子的方式发送原料采购发票。当然，这并不是一个 新的概念，EDI(电子文档交换)早就是这样了。但是，WebService的实现要比EDI简单得多，而且WebService运行在Internet 上，在世界任何地方都可轻易实现，其运行成本就相对较低。不过，WebService并不像EDI那样，是文档交换或B2B集成的完整解决方案。 WebService只是B2B集成的一个关键部分，还需要许多其它的部分才能实现集成。\n\n　　用WebService来实现B2B集成的最大好处在于可以轻易实现互操作性。只要把商务逻辑“暴露”出来，成为WebService，就可以让任何指定 的合作伙伴调用这些商务逻辑，而不管他们的系统在什么平台上运行，使用什么开发语言。这样就大大减少了花在B2B集成上的时间和成本，让许多原本无法承受 EDI的中小企业也能实现B2B集成。\n\n### 4、软件和数据重用\n\n   软件重用是一个很大的主题，重用的形式很多，重用的程度有大有小。最基本的形式是源代码模块或者类一级的重用，一种形式是二进制形式的组件重用。采用 WebService应用程序可以用标准的方法把功能和数据“暴露”出来，供其它应用程序使用，达到业务级重用。\n\n## 六、不适用场合\n\n### 1、单机应用程序\n\n 目前，企业和个人还使用着很多桌面应用程序。其中一些只需要与本机上的其它程序通信。在这种情况下，最好就不要用WebService，只要用本地的 API就可以了。COM非常适合于在这种情况下工作，因为它既小又快。运行在同一台服务器上的服务器软件也是这样。最好直接用COM或其它本地的API来 进行应用程序间的调用。当然WebService也能用在这些场合，但那样不仅消耗太大，而且不会带来任何好处。\n\n### 2、局域网的同构应用程序\n\n 在许多应用中，所有的程序都是用VB或VC开发的，都在Windows平台下使用COM，都运行在同一个局域网上。例如，有两个服务器应用程序需要相互通 信，或者有一个Win32或WinForm的客户程序要连接局域网上另一个服务器的程序。在这些程序里，使用DCOM会比SOAP/HTTP有效得多。与 此相类似，如果一个.NET程序要连接到局域网上的另一个.NET程序，应该使用.NETremoting。有趣的是，在.NETremoting 中，也可以指定使用SOAP/HTTP来进行WebService调用。不过最好还是直接通过TCP进行RPC调用，那样会有效得多。\n\n\n# 归纳\n## 一、WebService是什么？\n\n　　1\\. 基于Web的服务：服务器端整出一些资源让客户端应用访问（获取数据）\n\n　　2\\. 一个跨语言、跨平台的规范（抽象）\n\n　　3\\. 多个跨平台、跨语言的应用间通信整合的方案（实际）\n\n## 二、为什么要用Web service？\n\n　　web service能解决：\n\n1.  跨平台调用\n2.  跨语言调用\n3.  远程调用\n\n## 三、什么时候使用web Service?\n\n　　1\\. 同一家公司的新旧应用之间\n\n　　2\\. 不同公司的应用之间\n\n　　3\\. 一些提供数据的内容聚合应用：天气预报、股票行情\n\n## 四、Web Service中的几个重要术语\n\n### 4.1、WSDL(web service definition language)\n\nWSDL是webservice定义语言, 对应.wsdl文档, 一个webservice会对应一个唯一的wsdl文档, 定义了客户端与服务端发送请求和响应的数据格式和过程\n\n### 4.2、SOAP(simple object  access protocal)\n\n　　SOAP是\"**简单对象访问协议**\"\n\n1.  是一种简单的、基于**HTTP****和**[**XML**](http://baike.baidu.com/view/63.htm)**的协议**, 用于在WEB上交换**结构化的数据**\n2.  soap消息：**请求消息**和**响应消息**\n\n### 4.3、SEI(WebService EndPoint Interface)\n\n**　　SEI是web service****的终端接口，**就是WebService服务器端用来处理请求的接口\n\n### 4.4、CXF(Celtix + XFire)\n\n　　一个apache的用于开发webservice服务器端和客户端的框架。\n\n\n\n\n# [调用第三方提供的webService服务](https://www.cnblogs.com/xdp-gacl/p/4260627.html)\n\nhttp://www.webxml.com.cn/zh_cn/web_services.aspx\n找到WebService的wsdl描述\n借助wsimport命令工具自动生成客户端代码\n执行\"wsimport -keep http://webservice.webxml.com.cn/WebServices/WeatherWS.asmx?wsdl\"生成客户端代码\n运行结果显示，使用wsimport工具直接生成客户端代码会抛异常, 无法生成客户端代码, 只是因为我们要调用的WebService是用.net写的，这个是Java调用net的webservice都有的问题，这个问题的解决办法如下：\n1.  将对应的wsdl文档保存到本地　　\n2. 修改wsdl文档的部分内容:将 <s:element ref=\"s:schema\" /><s:any /> 替换成 <s:any minOccurs=\"2\" maxOccurs=\"2\"/>\n3. 再次执行wsimport生成代码，这次使用保存在本地的WeatherWS.wsdl文件来进行生成\n",[[1547467052174,["yongchao@yongchao-PC",[[-1,6564,"****"]],[6564,6568],[6564,6564]]],[1547467053830,["yongchao@yongchao-PC",[[-1,6558,"**"]],[6558,6560],[6558,6558]]],[1547467059244,["yongchao@yongchao-PC",[[-1,6563,"**[**"]],[6563,6565],[6563,6563]]],[1547467062174,["yongchao@yongchao-PC",[[-1,6566,"**]"]],[6566,6569],[6566,6566]]],[1547467066462,["yongchao@yongchao-PC",[[-1,6602,"**"]],[6602,6604],[6602,6602]]],[1547467068636,["yongchao@yongchao-PC",[[-1,6605,"**"]],[6605,6607],[6605,6605]]],[1547467072637,["yongchao@yongchao-PC",[[-1,6616,"**"]],[6618,6618],[6616,6616]]],[1547467075853,["yongchao@yongchao-PC",[[1,6614,"交换**"]],[6614,6614],[6618,6618]]],[1547467077709,["yongchao@yongchao-PC",[[-1,6616,"**"]],[6618,6618],[6616,6616]]],[1547467078949,["yongchao@yongchao-PC",[[-1,6622,"**"]],[6624,6624],[6622,6622]]],[1547467080688,["yongchao@yongchao-PC",[[-1,6649,"**"]],[6651,6651],[6649,6649]]],[1547467081902,["yongchao@yongchao-PC",[[-1,6643,"**"]],[6645,6645],[6643,6643]]],[1547467082934,["yongchao@yongchao-PC",[[-1,6640,"**"]],[6642,6642],[6640,6640]]],[1547467084308,["yongchao@yongchao-PC",[[-1,6634,"**"]],[6636,6636],[6634,6634]]],[1547467094365,["yongchao@yongchao-PC",[[-1,6708,"****"]],[6712,6712],[6708,6708]]],[1547467096917,["yongchao@yongchao-PC",[[-1,6714,"**"]],[6716,6716],[6714,6714]]],[1547467098388,["yongchao@yongchao-PC",[[-1,6689,"**"]],[6691,6691],[6689,6689]]],[1547467161230,[null,[[-1,6616,"交换"],[-1,6622,"**"],[1,6624,"数据"],[-1,6634,"**请求***响应**"],[1,6645,"息：请求消息和响应消息"],[-1,6689,"**"],[1,6691,"\n\n"],[-1,6706,"**"],[1,6708,"ce"],[-1,6712,"**"],[1,6714,"口，"]],[6616,6616],[6716,6716]]],[1547467161230,[null,[[1,6616,"交换"],[1,6620,"**"],[-1,6620,"数据"],[1,6632,"**请求***响应**"],[-1,6632,"息：请求消息和响应消息"],[1,6687,"**"],[-1,6687,"\n\n"],[1,6704,"**"],[-1,6704,"ce"],[1,6710,"**"],[-1,6710,"口，"]],[6716,6716],[6616,6616]]],[1547467156966,["yongchao@yongchao-PC",[[-1,6809,"\n"]],[6807,6807],[6806,6806]]],[1547467157430,["yongchao@yongchao-PC",[[-1,6808,"\n"]],[6806,6806],[6805,6805]]],[1547467159662,["yongchao@yongchao-PC",[[-1,6807,"\n"]],[6806,6806],[6805,6805]]]],null,"yongchao@yongchao-PC"]]}